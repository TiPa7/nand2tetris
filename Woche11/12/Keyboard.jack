// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack
/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    static int addr;

    /** Initializes the keyboard. */
    function void init() {
        let addr = 24576;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(addr);
    }

    /**	Waits until a key is pressed on the keyboard and released,
     *  then echoes the key to the screen, and returns the character 
     *  of the pressed key. */
    function char readChar() {

        // Anmerkung: es kann passieren, dass wird so kurz drücken, dass die erste while
        // beendet wird, aber im key wieder eine 0 steht

        var char key;
        while(Keyboard.keyPressed() = 0) {
            //Beginne, sobald gedrückt wird
        }
        let key = Keyboard.keyPressed();
        while(~(Keyboard.keyPressed() = 0)) {
            //Erst weitermachen, wenn nichts mehr gedrückt wird
        }
        do Output.printChar(key);
        return key;
    }

    /**	Displays the message on the screen, reads from the keyboard the entered
     *  text until a newline character is detected, echoes the text to the screen,
     *  and returns its value. Also handles user backspaces. */
    function String readLine(String message) {
        var String line;
        var char currentChar;
        
        do Output.printString(message);
        
        let line = String.new(50);
        let currentChar = Keyboard.readChar();
        while(~(currentChar = String.newLine())) {
            if( currentChar = String.backSpace() ) {
                do line.eraseLastChar();
            }
            else {
                do line.appendChar(currentChar);
            }
            let currentChar = Keyboard.readChar();
        }
        return line;
    }   

    /** Displays the message on the screen, reads from the keyboard the entered
     *  text until a newline character is detected, echoes the text to the screen,
     *  and returns its integer value (until the first non-digit character in the
     *  entered text is detected). Also handles user backspaces. */
    function int readInt(String message) {
        var String l;
        let l = Keyboard.readLine(message);
        return l.intValue();
        //return Keyboard.readLine(message).intValue();
    }
}

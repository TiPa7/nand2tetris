class Screen {
    static int base;
    static boolean color;
    static Array powersOfTwo;
    
    /** Initializes the Screen. */
    function void init() {
        let base = 16384;
        let color = 1;
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = 16384+16384;
        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            do Memory.poke(base + i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the color to be used in further draw commands. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
        var int address;
        var int mask;
        var int currentValue;
        var int newValue;
        
        let address = (y * 32) + (x / 16);
        let mask = powersOfTwo[x & 15];
        
        let currentValue = Memory.peek(base + address);
        
        if (color) {
            let newValue = currentValue | mask;
        }
        else {
            let newValue = currentValue & (~mask);
        }
        
        do Memory.poke(base + address, newValue);
        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int absDx, absDy;

        var int sx, sy;
        var int err, e2;
        
        let dx = x2 - x1;
        let dy = y2 - y1;
        
        // Spezialfälle für horizontale/vertikale Linien
        if (dx = 0) {
            let absDy = Math.abs(dy);
            if (y1 < y2) {
                do Screen.drawVerticalLine(x1, y1, absDy);
            } else {
                do Screen.drawVerticalLine(x1, y2, absDy);
            }
            return;
        }
        
        if (dy = 0) {
            let absDx = Math.abs(dx);
            if (x1 < x2) {
                do Screen.drawHorizontalLine(x1, y1, absDx);
            } else {
                do Screen.drawHorizontalLine(x2, y1, absDx);
            }
            return;
        }
        
        // Bresenham-Algorithmus für diagonale Linien
        let absDx = Math.abs(dx);
        let absDy = Math.abs(dy);
        
        if (x1 < x2) { let sx = 1; } else { let sx = -1; }
        if (y1 < y2) { let sy = 1; } else { let sy = -1; }
        
        let err = absDx - absDy;
        
        while (~((x1 = x2) & (y1 = y2))) {
            do Screen.drawPixel(x1, y1);
            let e2 = 2 * err;
            if (e2 > -absDy) {
                let err = err - absDy;
                let x1 = x1 + sx;
            }
            if (e2 < absDx) {
                let err = err + absDx;
                let y1 = y1 + sy;
            }
        }
        do Screen.drawPixel(x1, y1);
        return;
    }

    function void drawHorizontalLine(int x, int y, int length) {
        var int i;
        let i = 0;
        while (~(i > length)) {
            do Screen.drawPixel(x + i, y);
            let i = i + 1;
        }
        return;
    }
    
    function void drawVerticalLine(int x, int y, int length) {
        var int i;
        let i = 0;
        while (~(i > length)) {
            do Screen.drawPixel(x, y + i);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled rectangle. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int startX, startY, dx, height, i;
        let dx = x2 - x1;
        if (dx < 0) {
            let startX = x2;
            let dx = -dx;
        }
        else {
            let startX = x1;
        }
        
        let height = y2 - y1;
        if (height < 0) {
            let startY = y2;
            let height = -height;
        }
        else {
            let startY = y1;
        }
        
        let i = 0;
        while (i < height) {
            do Screen.drawHorizontalLine(startX, startY + i, dx);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle. */
    function void drawCircle(int cx, int cy, int r) {
        var int dy, sqrtDist, xStart, width;
        let dy = -r;
        while (~(dy > r)) {
            let sqrtDist = Math.sqrt((r * r) - (dy * dy));
            let xStart = cx - sqrtDist;
            let width = 2 * sqrtDist;
            do Screen.drawHorizontalLine(xStart, cy + dy, width);
            let dy = dy + 1;
        }
        return;
    }
}
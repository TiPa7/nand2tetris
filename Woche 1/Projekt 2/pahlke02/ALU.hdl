// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // 1. zx und zy umsetzen
    //zx und zy auf 16bit erweitern
    Mux16(a=false, b=true, sel=zx , out=zx16);
    Mux16(a=false, b=true, sel=zy , out=zy16);

    // x und y auf 0 setzen, falls zx bzw. zy gesetzt
    // f = x_i AND (NOT zx_i)
    Not16(in=zx16 , out=notzx16);
    And16(a=x , b=notzx16, out=prex);
    
    Not16(in=zy16 , out=notzy16);
    And16(a=y , b=notzy16, out=prey);

    // 2. nx und ny umsetzen
    //nx und ny auf 16bit erweitern
    Mux16(a=false, b=true, sel=nx , out=nx16);
    Mux16(a=false, b=true, sel=ny , out=ny16);

    //x und y negieren, falls nx bzw. ny gesetzt (XOR16)
    // Xor16(a=prex, b=nx16, out=newx)
    Not16(in=nx16, out=notnx16);
    And16(a=prex , b=notnx16, out=aprex);
    Not16(in=prex, out=notprex);
    And16(a=notprex, b=nx16, out=bprex);
    Or16(a=aprex, b=bprex, out=newx);

    // Xor16(a=prey, b=ny16, out=newy)
    Not16(in=ny16, out=notny16);
    And16(a=prey , b=notny16, out=aprey);
    Not16(in=prey, out=notprey);
    And16(a=notprey, b=ny16, out=bprey);
    Or16(a=aprey, b=bprey, out=newy);

    // 3. f umsetzen 
    And16(a=newx , b=newy, out=xANDy);
    Add16(a=newx, b=newy, out=xPLUSy);
    Mux16(a=xANDy , b=xPLUSy, sel=f, out=preout);

    // 4. no umsetzen (Xor16)
    // Xor16(a=preout, b=no16, out[0..7]=finalout07, out[8..15]=finalout815);
    Mux16(a=false, b=true, sel=no, out=no16);

    Not16(in=preout, out=notpreout);
    And16(a=notpreout , b=no16, out=aNoOut);
    Not16(in=no16, out=notno16);
    And16(a=preout, b=notno16, out=bNoOut);
    Or16(a=aNoOut, b=bNoOut, out[0..7]=finalout07, out[8..15]=finalout815);

    //And16(a=preout, b=no16, out=ppout);
    //Not16(in=ppout, out[0..7]=finalout07, out[8..15]=finalout815);

    //NOP
    And16(a=true, b[0..7]=finalout07, b[8..15]=finalout815, out=out); 


    // 5. Flags umsetzen
    Or8Way(in=finalout07, out=t1);
    Or8Way(in=finalout815, out=t2);
    Or(a=t1, b=t2, out=prezr);
    Not(in=prezr, out=zr);

    And16(a[8..15]=finalout815, b=true, out[15]=ng);    
}
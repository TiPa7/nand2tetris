// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    Mux16(a=instruction, b=aluOUT, sel=instruction[15], out=muxOUT);

    //A-Register, for load see encoding on slide 22
    //Last 15 bits are interpreted as address
    //Also writing to A if we have an A-instruction
    //Fehlerquelle: A schreiben, wenn A-Instruktion ODER d1 gesetzt
    Not(in=instruction[15], out=noti);
    Or(a=instruction[5], b=noti, out=loadA);
    ARegister(in=muxOUT, load=loadA, out=regAOUT, out[0..14]=addressM);

    //Decide with a-Bit/instruction[12] if A or M is used
    Mux16(a=regAOUT, b=inM, sel=instruction[12], out=aluY);

    //D-Register, for load see encoding on slide 22
    //Fehlerquelle: D nur schreiben, wenn i UND d2 true
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=aluOUT, load=loadD, out=outD);

    ALU(x=outD, y=aluY, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOUT, out=outM, zr=zr, ng=ng);


    //PC-Ansteuerung:
    Not(in=ng, out=pos);
    Not(in=zr, out=notzr);
    And(a=pos, b=notzr, out=prej3);

    //j1: neg
    //j2: zr
    //j3: notng AND notzr

    And(a=instruction[15], b=instruction[2], out=ltnz);
    And(a=ltnz, b=ng, out=j1fulfilled);

    And(a=instruction[15], b=instruction[1], out=zero);
    And(a=zero, b=zr, out=j2fulfilled);

    And(a=instruction[15], b=instruction[0], out=gtnz);
    And(a=pos, b=notzr, out=posnotzero);
    And(a=posnotzero, b=gtnz, out=j3fulfilled);

    Or(a=j1fulfilled, b=j2fulfilled, out=t1);
    Or(a=t1, b=j3fulfilled, out=pcLOAD);

    // Not(in=pcLOAD, out=pcINC);    

    //PC wird von jmp-Bits gesteuert
    PC(in=regAOUT, load=pcLOAD, inc=true, reset=reset, out[0..14]=pc);

    //writeM ist einfach instruction[3] = d3 aber NUR im Falle, dass C-Instruction vorliegt!!
    And(a=instruction[15], b=instruction[3], out=writeM);
}